import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';
import { Link } from 'react-router-dom';
import { getAllBoards, deleteBoard, createBoard } from '../services/api';
import { useState } from 'react';
import { Dialog, DialogPanel, DialogTitle } from '@headlessui/react';
import { PlusIcon } from '@heroicons/react/24/outline';
import { useNotifications } from './NotificationContainer';

export default function BoardList() {
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [boardToDelete, setBoardToDelete] = useState<{ id: string; name: string } | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [newBoardName, setNewBoardName] = useState('');
  const [newBoardGoal, setNewBoardGoal] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const queryClient = useQueryClient();
  const notifications = useNotifications();
  
  const { data: boards, isLoading, error } = useQuery({
    queryKey: ['boards'],
    queryFn: getAllBoards,
  });

  const createBoardMutation = useMutation({
    mutationFn: ({ name, goal }: { name: string; goal: string }) => createBoard(name, goal),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['boards'] });
      setIsCreateDialogOpen(false);
      setNewBoardName('');
      setNewBoardGoal('');
      notifications.success('Board created successfully');
    },
    onError: (error) => {
      notifications.error('Failed to create board', error instanceof Error ? error.message : 'Unknown error');
    }
  });

  const handleDeleteClick = (boardId: string, boardName: string) => {
    setBoardToDelete({ id: boardId, name: boardName });
    setIsDeleteDialogOpen(true);
  };

  const handleConfirmDelete = async () => {
    if (!boardToDelete) return;
    
    try {
      setIsDeleting(true);
      await deleteBoard(boardToDelete.id);
      // Invalidate the boards query to refresh the list
      queryClient.invalidateQueries({ queryKey: ['boards'] });
      notifications.success('Board deleted successfully');
    } catch (error) {
      console.error('Error deleting board:', error);
      notifications.error('Failed to delete board', error instanceof Error ? error.message : 'Unknown error');
    } finally {
      setIsDeleting(false);
      setIsDeleteDialogOpen(false);
      setBoardToDelete(null);
    }
  };

  const handleCreateBoard = () => {
    if (!newBoardName.trim() || !newBoardGoal.trim()) {
      notifications.error('Validation error', 'Board name and goal are required');
      return;
    }
    createBoardMutation.mutate({ name: newBoardName.trim(), goal: newBoardGoal.trim() });
  };

  const handleCreateDialogClose = () => {
    if (!createBoardMutation.isPending) {
      setIsCreateDialogOpen(false);
      setNewBoardName('');
      setNewBoardGoal('');
    }
  };

  // Filter boards based on search query
  const filteredBoards = boards?.filter(board =>
    board.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    board.goal.toLowerCase().includes(searchQuery.toLowerCase())
  ) || [];

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <p className="text-sm text-red-700">
              Error loading boards: {error instanceof Error ? error.message : 'Unknown error'}
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Show welcome screen if no boards exist at all
  if (boards && boards.length === 0) {
    return (
      <div className="px-4 sm:px-6 lg:px-8">
        <div className="text-center py-16">
          <div className="mx-auto max-w-md">
            <svg className="mx-auto h-24 w-24 text-gray-300 mb-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z" />
            </svg>
            <h1 className="text-4xl font-bold text-gray-900 mb-4">Welcome to MCP Kanban!</h1>
            <p className="text-xl text-gray-600 mb-8 leading-relaxed">
              Transform your project management with visual kanban boards. 
              Organize tasks, track progress, and collaborate effectively.
            </p>
            <div className="space-y-4 text-left bg-gray-50 rounded-xl p-6 mb-8">
              <h3 className="text-lg font-semibold text-gray-900 mb-3">✨ What you can do:</h3>
              <div className="space-y-2 text-gray-600">
                <div className="flex items-start space-x-2">
                  <span className="text-indigo-600">•</span>
                  <span>Create unlimited kanban boards for different projects</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-indigo-600">•</span>
                  <span>Organize tasks in customizable columns (To Do, In Progress, Done)</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-indigo-600">•</span>
                  <span>Drag and drop tasks between columns</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-indigo-600">•</span>
                  <span>Set WIP limits to improve workflow efficiency</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-indigo-600">•</span>
                  <span>Write detailed task descriptions with Markdown support</span>
                </div>
              </div>
            </div>
            <button
              onClick={() => setIsCreateDialogOpen(true)}
              className="inline-flex items-center gap-x-3 rounded-xl bg-indigo-600 px-6 py-4 text-lg font-semibold text-white shadow-xl hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-all duration-200 hover:shadow-2xl hover:scale-105"
            >
              <PlusIcon className="h-6 w-6" aria-hidden="true" />
              Create your first board
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8">
      <div className="sm:flex sm:items-center sm:justify-between">
        <div className="sm:flex-auto">
          <div className="flex items-center space-x-3 mb-2">
            <div className="w-1 h-8 bg-gradient-to-b from-indigo-500 to-purple-600 rounded-full"></div>
            <h1 className="text-3xl font-extrabold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 bg-clip-text text-transparent">
              Kanban Boards
            </h1>
          </div>
          <p className="mt-3 text-lg text-gray-600 font-medium">
            {filteredBoards.length} board{filteredBoards.length !== 1 ? 's' : ''} 
            {searchQuery ? (
              <span className="ml-2">
                found <span className="text-base text-gray-500 font-normal">(filtered from {boards?.length || 0} total)</span>
              </span>
            ) : (
              <span className="text-base text-gray-500 font-normal ml-2">• Organize your projects with elegant simplicity</span>
            )}
          </p>
        </div>
        <div className="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
          <button
            type="button"
            onClick={() => setIsCreateDialogOpen(true)}
            className="group relative inline-flex items-center gap-x-2 rounded-2xl bg-gradient-to-r from-indigo-600 via-indigo-600 to-purple-600 px-6 py-3 text-sm font-bold text-white shadow-2xl hover:shadow-indigo-500/25 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500 transition-all duration-300 hover:scale-105 hover:-translate-y-0.5 backdrop-blur-sm"
          >
            <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <PlusIcon className="-ml-0.5 h-5 w-5 relative z-10 group-hover:rotate-90 transition-transform duration-300" aria-hidden="true" />
            <span className="relative z-10">New Board</span>
            <div className="absolute inset-0 rounded-2xl bg-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </button>
        </div>
      </div>
      
      {/* Search bar */}
      <div className="mt-10">
        <div className="relative max-w-lg">
          <div className="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none">
            <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input
            type="text"
            placeholder="Search boards by name or goal..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="block w-full rounded-2xl border-0 py-4 pl-12 pr-16 text-gray-900 bg-white/70 backdrop-blur-xl ring-1 ring-gray-200/50 placeholder:text-gray-500 focus:ring-2 focus:ring-indigo-500/50 focus:bg-white/90 sm:text-base font-medium shadow-xl shadow-gray-200/20 transition-all duration-300 hover:shadow-2xl hover:shadow-indigo-200/30"
          />
          {searchQuery && (
            <button
              type="button"
              onClick={() => setSearchQuery('')}
              className="absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 hover:text-indigo-600 transition-all duration-200 hover:scale-110"
            >
              <div className="bg-gray-100 hover:bg-indigo-100 rounded-full px-3 py-1 text-sm font-semibold transition-all duration-200">
                Clear
              </div>
            </button>
          )}
        </div>
      </div>
      <div className="mt-12 flow-root">
        <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
            <div className="overflow-hidden shadow-2xl shadow-gray-200/20 ring-1 ring-gray-200 rounded-3xl bg-white/70 backdrop-blur-xl">
              <table className="min-w-full divide-y divide-gray-200/30">
              <thead className="bg-gradient-to-r from-gray-50/80 via-white/60 to-gray-50/80 backdrop-blur-sm">
                <tr>
                  <th scope="col" className="py-5 pl-6 pr-3 text-left text-sm font-bold bg-gradient-to-r from-gray-800 to-gray-700 bg-clip-text text-transparent uppercase tracking-wider">
                    Name
                  </th>
                  <th scope="col" className="px-3 py-5 text-left text-sm font-bold bg-gradient-to-r from-gray-800 to-gray-700 bg-clip-text text-transparent uppercase tracking-wider">
                    Goal
                  </th>
                  <th scope="col" className="px-3 py-5 text-left text-sm font-bold bg-gradient-to-r from-gray-800 to-gray-700 bg-clip-text text-transparent uppercase tracking-wider">
                    Created At
                  </th>
                  <th scope="col" className="px-3 py-5 text-left text-sm font-bold bg-gradient-to-r from-gray-800 to-gray-700 bg-clip-text text-transparent uppercase tracking-wider">
                    Updated At
                  </th>
                  <th scope="col" className="relative py-5 pl-3 pr-6">
                    <span className="sr-only">Actions</span>
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100/50 bg-white/40">
                {filteredBoards.length === 0 ? (
                  <tr>
                    <td colSpan={5} className="px-3 py-20 text-center">
                      <div className="flex flex-col items-center justify-center">
                        {searchQuery ? (
                          <>
                            <div className="w-16 h-16 bg-gradient-to-br from-gray-200 to-gray-300 rounded-2xl flex items-center justify-center mb-6 shadow-lg">
                              <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                              </svg>
                            </div>
                            <p className="text-xl font-bold text-gray-900 mb-3">No boards found</p>
                            <p className="text-base text-gray-600 mb-6 max-w-md">No boards match "{searchQuery}". Try a different search term.</p>
                            <button
                              onClick={() => setSearchQuery('')}
                              className="inline-flex items-center px-5 py-2.5 border-0 rounded-2xl text-sm font-semibold text-gray-700 bg-gradient-to-r from-white to-gray-50 shadow-xl hover:shadow-2xl hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all duration-300"
                            >
                              Clear search
                            </button>
                          </>
                        ) : (
                          <>
                            <div className="w-20 h-20 bg-gradient-to-br from-indigo-100 to-purple-100 rounded-3xl flex items-center justify-center mb-6 shadow-xl">
                              <svg className="w-10 h-10 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z" />
                              </svg>
                            </div>
                            <p className="text-2xl font-bold text-gray-900 mb-3">Welcome to MCP Kanban!</p>
                            <p className="text-lg text-gray-600 mb-8 max-w-lg text-center leading-relaxed">
                              Get started by creating your first kanban board to organize your projects and tasks.
                            </p>
                            <button
                              onClick={() => setIsCreateDialogOpen(true)}
                              className="inline-flex items-center gap-x-2 rounded-2xl bg-gradient-to-r from-indigo-600 to-purple-600 px-6 py-3 text-base font-bold text-white shadow-2xl hover:shadow-indigo-500/25 hover:scale-105 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-all duration-300"
                            >
                              <PlusIcon className="h-5 w-5" aria-hidden="true" />
                              Create your first board
                            </button>
                          </>
                        )}
                      </div>
                    </td>
                  </tr>
                ) : (
                  filteredBoards.map((board, index) => (
                  <tr key={board.id} className="group hover:bg-gradient-to-r hover:from-indigo-50/50 hover:via-white/80 hover:to-purple-50/50 transition-all duration-300 hover:scale-[1.01] hover:shadow-lg hover:shadow-indigo-100/30">
                    <td className="whitespace-nowrap py-5 pl-6 pr-3 text-base font-bold text-gray-900 group-hover:text-indigo-900 transition-colors duration-300">
                      <div className="flex items-center space-x-3">
                        <div className="w-2 h-2 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full opacity-70 group-hover:opacity-100 transition-opacity duration-300"></div>
                        <span>{board.name}</span>
                      </div>
                    </td>
                    <td className="px-3 py-5 text-sm text-gray-700 max-w-[300px] overflow-hidden text-ellipsis font-medium group-hover:text-gray-800 transition-colors duration-300">
                      {board.goal}
                    </td>
                    <td className="whitespace-nowrap px-3 py-5 text-sm text-gray-600 font-medium group-hover:text-gray-700 transition-colors duration-300">
                      {new Date(board.created_at).toLocaleDateString()}
                    </td>
                    <td className="whitespace-nowrap px-3 py-5 text-sm text-gray-600 font-medium group-hover:text-gray-700 transition-colors duration-300">
                      {new Date(board.updated_at).toLocaleDateString()}
                    </td>
                    <td className="relative whitespace-nowrap py-5 pl-3 pr-6 text-right text-sm font-medium">
                      <div className="flex items-center justify-end gap-3">
                        <Link 
                          to={`/boards/${board.id}`} 
                          className="group/btn relative inline-flex items-center px-4 py-2 text-sm font-bold text-white bg-gradient-to-r from-indigo-600 to-indigo-700 rounded-xl shadow-lg hover:shadow-indigo-500/30 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all duration-300 overflow-hidden"
                        >
                          <div className="absolute inset-0 bg-gradient-to-r from-indigo-700 to-purple-600 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300"></div>
                          <span className="relative z-10">View</span>
                          <span className="sr-only">, {board.name}</span>
                        </Link>
                        <button
                          onClick={() => handleDeleteClick(board.id, board.name)}
                          className="group/btn relative inline-flex items-center px-4 py-2 text-sm font-bold text-white bg-gradient-to-r from-red-500 to-red-600 rounded-xl shadow-lg hover:shadow-red-500/30 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-300 overflow-hidden"
                        >
                          <div className="absolute inset-0 bg-gradient-to-r from-red-600 to-red-700 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300"></div>
                          <span className="relative z-10">Delete</span>
                          <span className="sr-only">, {board.name}</span>
                        </button>
                      </div>
                    </td>
                  </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      
      {/* Delete Confirmation Dialog */}
      <Dialog
        open={isDeleteDialogOpen}
        onClose={() => !isDeleting && setIsDeleteDialogOpen(false)}
        className="relative z-50"
      >
        <div className="fixed inset-0 bg-gradient-to-br from-black/60 via-black/40 to-black/60 backdrop-blur-md" aria-hidden="true" />
        
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <DialogPanel className="mx-auto max-w-sm rounded-3xl bg-white/95 backdrop-blur-xl p-8 shadow-2xl shadow-red-500/20 ring-1 ring-white/20 border border-red-100/50">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-10 h-10 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </div>
              <DialogTitle className="text-xl font-bold bg-gradient-to-r from-gray-900 to-red-800 bg-clip-text text-transparent">
                Delete Board
              </DialogTitle>
            </div>
            
            <div className="mb-6">
              <p className="text-base text-gray-700 leading-relaxed font-medium">
                Are you sure you want to delete the board <span className="font-bold text-red-600">"{boardToDelete?.name}"</span>? 
                This action cannot be undone and all tasks will be permanently deleted.
              </p>
            </div>

            <div className="flex justify-end space-x-3">
              <button
                type="button"
                className="inline-flex justify-center rounded-2xl border-0 bg-gradient-to-r from-gray-100 to-gray-200 px-6 py-3 text-sm font-bold text-gray-700 hover:from-gray-200 hover:to-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-xl"
                onClick={() => setIsDeleteDialogOpen(false)}
                disabled={isDeleting}
              >
                Cancel
              </button>
              <button
                type="button"
                className="inline-flex justify-center rounded-2xl border-0 bg-gradient-to-r from-red-600 to-red-700 px-6 py-3 text-sm font-bold text-white hover:from-red-700 hover:to-red-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-300 hover:scale-105 shadow-xl hover:shadow-2xl hover:shadow-red-500/30 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
                onClick={handleConfirmDelete}
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <span>Deleting...</span>
                  </div>
                ) : (
                  'Delete'
                )}
              </button>
            </div>
          </DialogPanel>
        </div>
      </Dialog>

      {/* Create Board Dialog */}
      <Dialog
        open={isCreateDialogOpen}
        onClose={handleCreateDialogClose}
        className="relative z-50"
      >
        <div className="fixed inset-0 bg-gradient-to-br from-black/60 via-indigo-900/30 to-purple-900/40 backdrop-blur-md" aria-hidden="true" />
        
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <DialogPanel className="mx-auto max-w-lg w-full rounded-3xl bg-white/95 backdrop-blur-xl p-8 shadow-2xl shadow-indigo-500/20 ring-1 ring-white/20 border border-indigo-100/50">
            <div className="flex items-center space-x-3 mb-6">
              <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                <PlusIcon className="w-6 h-6 text-white" aria-hidden="true" />
              </div>
              <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-gray-900 via-indigo-800 to-purple-800 bg-clip-text text-transparent">
                Create New Board
              </DialogTitle>
            </div>
            
            <div className="space-y-6">
              <div>
                <label htmlFor="board-name" className="block text-sm font-bold text-gray-800 mb-2">
                  Board Name
                </label>
                <input
                  type="text"
                  id="board-name"
                  value={newBoardName}
                  onChange={(e) => setNewBoardName(e.target.value)}
                  placeholder="Enter board name..."
                  className="block w-full rounded-2xl border-0 py-4 px-5 text-gray-900 bg-white/70 backdrop-blur-sm ring-1 ring-gray-200/50 placeholder:text-gray-500 focus:ring-2 focus:ring-indigo-500/50 focus:bg-white/90 text-base font-medium shadow-lg transition-all duration-300 hover:shadow-xl hover:shadow-indigo-200/20"
                  disabled={createBoardMutation.isPending}
                />
              </div>
              
              <div>
                <label htmlFor="board-goal" className="block text-sm font-bold text-gray-800 mb-2">
                  Project Goal
                </label>
                <textarea
                  id="board-goal"
                  value={newBoardGoal}
                  onChange={(e) => setNewBoardGoal(e.target.value)}
                  placeholder="Describe the project goal in 1-3 sentences..."
                  rows={4}
                  className="block w-full rounded-2xl border-0 py-4 px-5 text-gray-900 bg-white/70 backdrop-blur-sm ring-1 ring-gray-200/50 placeholder:text-gray-500 focus:ring-2 focus:ring-indigo-500/50 focus:bg-white/90 text-base font-medium shadow-lg transition-all duration-300 hover:shadow-xl hover:shadow-indigo-200/20 resize-none"
                  disabled={createBoardMutation.isPending}
                />
              </div>
            </div>

            {createBoardMutation.isError && (
              <div className="mt-6 bg-gradient-to-r from-red-50 to-red-100/50 border border-red-200 rounded-2xl p-5 shadow-lg">
                <div className="flex items-start space-x-3">
                  <div className="w-6 h-6 bg-red-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <p className="text-sm font-medium text-red-800">
                    {createBoardMutation.error instanceof Error 
                      ? createBoardMutation.error.message 
                      : 'Failed to create board'}
                  </p>
                </div>
              </div>
            )}

            <div className="mt-8 flex justify-end space-x-4">
              <button
                type="button"
                className="inline-flex justify-center rounded-2xl border-0 bg-gradient-to-r from-gray-100 to-gray-200 px-8 py-3 text-sm font-bold text-gray-700 hover:from-gray-200 hover:to-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-xl"
                onClick={handleCreateDialogClose}
                disabled={createBoardMutation.isPending}
              >
                Cancel
              </button>
              <button
                type="button"
                className="inline-flex justify-center rounded-2xl border-0 bg-gradient-to-r from-indigo-600 to-purple-600 px-8 py-3 text-sm font-bold text-white hover:from-indigo-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all duration-300 hover:scale-105 shadow-xl hover:shadow-2xl hover:shadow-indigo-500/30 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
                onClick={handleCreateBoard}
                disabled={createBoardMutation.isPending || !newBoardName.trim() || !newBoardGoal.trim()}
              >
                {createBoardMutation.isPending ? (
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <span>Creating...</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-2">
                    <PlusIcon className="w-4 h-4" aria-hidden="true" />
                    <span>Create Board</span>
                  </div>
                )}
              </button>
            </div>
          </DialogPanel>
        </div>
      </Dialog>
    </div>
  );
}
