version: '3.8'

services:
  kanban-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: kanban-production
    restart: unless-stopped
    ports:
      - "8221:8221"
    environment:
      - NODE_ENV=production
      - PORT=8221
      - HOST=0.0.0.0
      - DATABASE_URL=file:./data/kanban.db
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TRUST_PROXY=true
    volumes:
      - kanban_data:/app/data
      - ./logs:/app/logs
    networks:
      - kanban-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8221/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kanban.rule=Host(`kanban.yourdomain.com`)"
      - "traefik.http.routers.kanban.tls=true"
      - "traefik.http.routers.kanban.tls.certresolver=letsencrypt"
      - "traefik.http.services.kanban.loadbalancer.server.port=8221"

  # Optional: Redis for session storage and rate limiting
  redis:
    image: redis:7-alpine
    container_name: kanban-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kanban-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    container_name: kanban-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-kanban}
      - POSTGRES_USER=${POSTGRES_USER:-kanban}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - kanban-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kanban} -d ${POSTGRES_DB:-kanban}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Traefik reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: kanban-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/acme.json:/acme.json
    networks:
      - kanban-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.yourdomain.com`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

volumes:
  kanban_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  kanban-network:
    driver: bridge